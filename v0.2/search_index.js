var documenterSearchIndex = {"docs":
[{"location":"#Getting-Started-1","page":"Getting Started","title":"Getting Started","text":"","category":"section"},{"location":"#","page":"Getting Started","title":"Getting Started","text":"OhMyQSIM is a toy quantum simulator package written in Julia to experiment with different methods and approaches.  If you have ideas on how to improve or extend, please get involved. A good place to start is by looking through the issues and adding or trying to address them as appropriate.","category":"page"},{"location":"#Notation-1","page":"Getting Started","title":"Notation","text":"","category":"section"},{"location":"#","page":"Getting Started","title":"Getting Started","text":"Quantum registers with n-qubits have qubits labeled from 1 to n from left to right as","category":"page"},{"location":"#","page":"Getting Started","title":"Getting Started","text":" m_1 m_2 m_3 rangle = m_1rangle otimes m_2rangle otimes m_3rangle","category":"page"},{"location":"#","page":"Getting Started","title":"Getting Started","text":"This mens the index of such a state in a state vector is m_1 2^2 + m_2 2^1 + m_3 2^0","category":"page"},{"location":"#Basic-usage-1","page":"Getting Started","title":"Basic usage","text":"","category":"section"},{"location":"#","page":"Getting Started","title":"Getting Started","text":"using OhMyQSIM\n\n# Create a quantum register with 3 qubits and initialise to |000>\nqreg = FullStateQuantumRegister{ComplexF64}(3, \"000\")\n\n# Apply a Pauli x operation to the first qubit \nqreg.apply_1_qubit!(qreg, Gates.x, 1)\n\n# Print the register\nprintln(to_str(qreg))","category":"page"},{"location":"#","page":"Getting Started","title":"Getting Started","text":"results in","category":"page"},{"location":"#","page":"Getting Started","title":"Getting Started","text":"(1.0 + 0.0im|100>)","category":"page"},{"location":"#Basic-functions-1","page":"Getting Started","title":"Basic functions","text":"","category":"section"},{"location":"#","page":"Getting Started","title":"Getting Started","text":"CurrentModule = OhMyQSIM","category":"page"},{"location":"#","page":"Getting Started","title":"Getting Started","text":"QuantumRegister\nFullStateQuantumRegister\nbinary_repr\nto_str\napply_1qubit_full\napply_1qubit\napply_1qubit!\ndecompose_2_qubit_gate\napply_2qubit_full\nswap_2qubits\napply_2qubit\napply_2qubit!\nmeasure_probs\nget_conf\nmeasure\nget_counts\n\n","category":"page"},{"location":"#OhMyQSIM.QuantumRegister","page":"Getting Started","title":"OhMyQSIM.QuantumRegister","text":"Abstract type and parent of all quantum register types\n\n\n\n\n\n","category":"type"},{"location":"#OhMyQSIM.FullStateQuantumRegister","page":"Getting Started","title":"OhMyQSIM.FullStateQuantumRegister","text":"Implementation type for full state quantum register\n\n\n\n\n\n","category":"type"},{"location":"#OhMyQSIM.binary_repr","page":"Getting Started","title":"OhMyQSIM.binary_repr","text":"binary_repr(num, N)\n\nGet the binary string representation of a decimal integer.\n\nExamples\n\njulia> println(binary_repr(5, 6))\n\"000101\"\n\n\n\n\n\n","category":"function"},{"location":"#OhMyQSIM.to_str","page":"Getting Started","title":"OhMyQSIM.to_str","text":"to_str(qreg::FullStateQuantumRegister)\n\nFunction to convert express fullstate quantum register as a string\n\nExamples\n\njulia> ψ = FullStateQuantumRegister{Int}(3, \"000\")\njulia> ψ.state[end] = 1\njulia> to_str(ψ)\n\"(1|000>) + (1|111>)\"\n\n\n\n\n\n","category":"function"},{"location":"#OhMyQSIM.apply_1qubit_full","page":"Getting Started","title":"OhMyQSIM.apply_1qubit_full","text":"apply_1qubit_full(qreg, gate, i)\n\nApply the 1 qubit gate to qubit i by expanding operator fully\n\n\n\n\n\n","category":"function"},{"location":"#OhMyQSIM.apply_1qubit","page":"Getting Started","title":"OhMyQSIM.apply_1qubit","text":"apply_1qubit(qreg, gate, i)\n\nApply the 1 qubit gate to qubit i\n\n\n\n\n\n","category":"function"},{"location":"#OhMyQSIM.apply_1qubit!","page":"Getting Started","title":"OhMyQSIM.apply_1qubit!","text":"apply_1qubit!(qreg, gate, i)\n\nApply the 1 qubit gate to qubit i inplace\n\n\n\n\n\n","category":"function"},{"location":"#OhMyQSIM.decompose_2_qubit_gate","page":"Getting Started","title":"OhMyQSIM.decompose_2_qubit_gate","text":"decompose_2_qubit_gate(gate; threshold=1e-15)\n\nDecompose a 2 qubit gate into a sum of 1 qubit gates on each qubit\n\n\n\n\n\n","category":"function"},{"location":"#OhMyQSIM.apply_2qubit_full","page":"Getting Started","title":"OhMyQSIM.apply_2qubit_full","text":"apply_2qubit_full(qreg, gate, i, j)\n\nApply the provided 2 qubit gate to qubits i and j by expanding full operator matrix\n\n\n\n\n\n","category":"function"},{"location":"#OhMyQSIM.swap_2qubits","page":"Getting Started","title":"OhMyQSIM.swap_2qubits","text":"swap_2qubits(X)\n\nGiven a two qubit operation, switch the order of the qubits\n\n\n\n\n\n","category":"function"},{"location":"#OhMyQSIM.apply_2qubit","page":"Getting Started","title":"OhMyQSIM.apply_2qubit","text":"apply_2qubit(qreg, gate, i, j)\n\nApply the provided 2 qubit gate to qubits i and j\n\n\n\n\n\n","category":"function"},{"location":"#OhMyQSIM.apply_2qubit!","page":"Getting Started","title":"OhMyQSIM.apply_2qubit!","text":"apply_2qubit!(qreg, gate, i, j)\n\nApply the provided 2 qubit gate to qubits i and j inplace\n\n\n\n\n\n","category":"function"},{"location":"#OhMyQSIM.measure_probs","page":"Getting Started","title":"OhMyQSIM.measure_probs","text":"measure_probs(qreg)\n\nGet for each bitstring\n\n\n\n\n\n","category":"function"},{"location":"#OhMyQSIM.get_conf","page":"Getting Started","title":"OhMyQSIM.get_conf","text":"get_conf(cprobs, num, N)\n\nGiven an array of cumulative probabilities of configurations and a random number from [0, 1], return the bitstring it corresponds to\n\n\n\n\n\n","category":"function"},{"location":"#OhMyQSIM.measure","page":"Getting Started","title":"OhMyQSIM.measure","text":"measure(qreg, shots)\n\nGiven a quantum register, return a typical set of measurements expected\n\n\n\n\n\n","category":"function"},{"location":"#OhMyQSIM.get_counts","page":"Getting Started","title":"OhMyQSIM.get_counts","text":"get_counts(results)\n\nGiven a set of measurement results in the form of bitstrings, return the counts of each\n\n\n\n\n\n","category":"function"},{"location":"algorithms/#Algorithms-1","page":"Algorithms","title":"Algorithms","text":"","category":"section"},{"location":"algorithms/#","page":"Algorithms","title":"Algorithms","text":"Functions to generate circuits for commonly used algorithms are provided. ","category":"page"},{"location":"algorithms/#","page":"Algorithms","title":"Algorithms","text":"CurrentModule = OhMyQSIM","category":"page"},{"location":"algorithms/#","page":"Algorithms","title":"Algorithms","text":"qft_circuit","category":"page"},{"location":"algorithms/#OhMyQSIM.qft_circuit","page":"Algorithms","title":"OhMyQSIM.qft_circuit","text":"qft_circuit(n::Integer)\n\nCreates a QFT circuit\n\n\n\n\n\n","category":"function"}]
}
